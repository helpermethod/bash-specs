#!/usr/bin/env bash

# Copyright (C) 2012 Oliver Weiler
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

LC_NUMERIC=C
TIMEFORMAT=%R
: ${TMPDIR:=/tmp}

readonly version_number=1.0.0

if [[ -t 1 ]]; then
  readonly red=$(tput setaf 1)
  readonly green=$(tput setaf 2)
  readonly cyan=$(tput setaf 6)
  readonly yellow=$(tput setaf 3)
  readonly reset=$(tput sgr0)
fi

readonly tmp_dir=${TMPDIR}/${RANDOM}.${RANDOM}.$$
readonly elapsed_time=${tmp_dir}/elapsed_time
readonly total_elapsed_time=${tmp_dir}/total_elapsed_time
readonly stderr=${tmp_dir}/stderr

readonly number_of_specs=${tmp_dir}/number_of_specs
readonly number_of_failed_specs=${tmp_dir}/number_of_failed_specs
readonly number_of_skipped_specs=${tmp_dir}/number_of_skipped_specs

skip_specs=false

original_functions=()

declare -A queue_size
declare -A queue_front
declare -A value_queue

declare -A number_of_calls
declare -A function_calls
declare -A default_values

describe() {
  printf '\n%s\n' "$1"

  skip_specs=false
}

expect() {
  if [[ $2 == not ]]; then
    ! "$3" "$1" "${@:4}"
  else
    "$2" "$1" "${@:3}"
  fi

  local result=$?

  ((result > 0)) && __print_error_message "$@"

  return "$result"
}

to_equal() {
  [[ $1 == "$2" ]]
}

to_be_less_than() {
  (($1 < $2))
}

to_be_less_than_or_equal_to() {
  (($1 <= $2))
}

to_be_greater_than() {
  (($1 > $2))
}

to_be_greater_than_or_equal_to() {
  (($1 >= $2))
}

to_start_with() {
  [[ $1 == "$2"* ]]
}

to_end_with() {
  [[ $1 == *"$2" ]]
}

to_contain() {
  [[ $1 == *"$2"* ]]
}

to_match() {
  [[ $1 =~ $2 ]]
}

to_be_called_with() {
  for ((i = 0; i < ${number_of_calls[$1]}; i++)); do
    for ((j = 2; j <= $#; j++)); do
      [[ ${function_calls[$1,$i,$((j - 2))]} == ${!j} ]] || continue 2
    done

    return 0
  done

  return 1
}

__print_error_message() {
  if [[ $error_message ]]; then
    printf '%s\n' "$error_message" 1>&2
    error_message=''

    return
  fi

  local error_message="Expected '$1'"

  if [[ $2 == not ]]; then
    error_message="$error_message $2"
    shift
  fi

  error_message="$error_message ${2//_/ }"

  local rest=(${@:3})

  for ((i = 0; i < ${#rest}; i++)); do
   error_message="$error_message '${rest[i]}'"
    ((i < ${#rest} - 1)) && error_message="${error_message},"
  done

  error_message+=('.')

  printf '%s\n' "${error_message//$'\e'/^[}" 1>&2
}

it() {
  if [[ $skip_specs == true ]]; then
    xit "$1"

    return
  fi

  before_each

  __execute_spec "$@"

  after_each
}

__execute_spec() {
  { time "$2" > /dev/null 2> "$stderr"; } 2> "$elapsed_time"
  local result=$?

  __inc "$number_of_specs"

  local elapsed=$(< "$elapsed_time")

  __accumulate_total_elapsed_time "$elapsed"

  if ((result == 0)); then
    __print_spec_result "$green" "$1" "$elapsed"

    return
  fi

  __inc "$number_of_failed_specs"

  __print_spec_result "$red" "$1" "$elapsed"

  if [[ -s "$stderr" ]]; then
    printf '    %s\n' "$(< "$stderr")"
  fi
}

__inc() {
  printf '%d' $(($(< "$1") + 1)) > "$1"
}

__accumulate_total_elapsed_time() {
  printf '%d' $(($(< "$total_elapsed_time") + 10#${1/./})) > "$total_elapsed_time"
}

__print_spec_result() {
  printf '%s  %s%s (%.3f s)%s\n' "$1" "$2" "$cyan" "$3" "$reset"
}

xit() {
  __inc "$number_of_specs"
  __inc "$number_of_skipped_specs"

  __print_spec_result "$yellow" "$1" 0
}

xdescribe() {
  printf '\n%s\n' "$1"

  skip_specs=true
}

__next_value() {
  local front=${queue_front[$1]}
  local value=${value_queue[$1,$front]:-${default_values[$1]}}

  queue_front[$1]=$((queue_front[$1] + 1))

  return "$value"
}

__mock() {
  local number=${number_of_calls[$FUNCNAME]}

  for ((i = 1; i <= $#; i++)); do
    printf "[$FUNCNAME,$number,$((i - 1))]=${!i}"> __mock
    function_calls[$FUNCNAME,$number,$((i - 1))]=${!i}
  done

  number_of_calls[$FUNCNAME]=$((number + 1))

  __next_value "$FUNCNAME"
}

create_mock() {
  original_functions+=("$(declare -f "$1")")
  local mock_definition=$(declare -f __mock)
  eval "${1}()${mock_definition#*\)}"

  number_of_calls[$1]=0
  queue_size[$1]=0
  queue_front[$1]=0
  default_values[$1]=0
}

__restore_original_functions() {
  for f in "${original_functions[@]}"; do
    eval "$f"
  done
}

mock_return_value_once() {
  local size=${queue_size[$1]}
  value_queue[$1,$size]=$2

  queue_size[$1]=$((size + 1))
}

mock_return_value() {
  default_values[$1]=$2
}

__cleanup_int() {
  trap - INT
  kill -INT $$

  __cleanup
}

__cleanup() {
  rm -rf "$tmp_dir"
}
 
__print_summary() {
  local total=$(< "$number_of_specs")
  local failed=$(< "$number_of_failed_specs")
  local skipped=$(< "$number_of_skipped_specs")
  local units
  ((total == 1)) && units=spec || units=specs
  local color
  ((failed == 0)) && color=$green || color=$red
  local total_time=$(< "$total_elapsed_time") 
  local seconds=$((total_time / 1000))
  local milli_seconds=$((total_time % 1000))

  printf '\n%s%s %s, %s failed, %s skipped%s (%d.%03d s)%s\n' "$color" "$total" "$units" "$failed" "$skipped" "$cyan" "$seconds" "$milli_seconds" "$reset"
}

main() {
  local specs=($@)

  if ((${#specs[@]} == 0)); then
    while read -d $'\0' -r; do
      specs+=($REPLY)
    done < <(find spec -name '*_spec.sh' -print0)
  fi

  printf 'bash-specs %s\n' "$version_number"

  mkdir -m 700 "$tmp_dir"
  trap __cleanup TERM EXIT
  trap __cleanup_int INT

  for f in "$number_of_specs" "$number_of_failed_specs" "$number_of_skipped_specs" "$total_elapsed_time"; do
    printf 0 > "$f"
  done
 
  for spec in ${specs[@]}; do
    (
      before_each() {
        :
      }

      after_each() {
        :
      }

      . "$spec"
    )
  done

  __print_summary

  (($(< "$number_of_failed_specs") == 0)) || exit 1
}

[[ $0 == "$BASH_SOURCE" ]] && main "$@"
